/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my_company.memoria.jogador;
import javax.swing.*;
import java.awt.*;
/**
 *
 * @author pinhe
 */
public class MenuCliente extends javax.swing.JFrame {
    private CardLayout cardLayout;
    private JPanel painelPrincipal;
    private MemoriaJogador memoriaJogador;
    private MemoriaTelespectador memoriaTelespectador;
    private boolean modoJogador;
    private int portaTelespectadorEscolhida = -1;
    /**
     * Creates new form MenuJogador
     */
    public MenuCliente() {
        setTitle("Jogo - Cliente");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        memoriaJogador = new MemoriaJogador(this);
        memoriaTelespectador = new MemoriaTelespectador(this);
        
        cardLayout = new CardLayout();
        painelPrincipal = new JPanel(cardLayout);

        // Adicionando os painéis
        painelPrincipal.add(new Inicial(this), "Inicial");
        painelPrincipal.add(new EntrarJogo(this), "EntrarJogo");
        painelPrincipal.add(new EsperaJogo(this), "EsperaJogo");
        painelPrincipal.add(new Jogo(this), "Jogo");

        
        add(painelPrincipal);
        setVisible(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        SwingUtilities.invokeLater(MenuCliente::new);

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
    }

    public void trocarPainel(String nome) {
        cardLayout.show(painelPrincipal, nome);
        Component atual = getPainelAtual();
        if (nome == "EntrarJogo"){
            ((EntrarJogo) atual).entrandoMenu();
        }
        else if(nome == "Jogo"){
            ((Jogo) atual).entrandoMenu();
        }
        painelPrincipal.revalidate(); // Força o painelPrincipal a se ajustar ao painel atual
        painelPrincipal.repaint();
        this.pack();
    }
    
    public String getPortaTelespectador(){return Integer.toString(this.portaTelespectadorEscolhida);}
    
    public void setPortaTelespectador(int porta){
        this.portaTelespectadorEscolhida = porta;
        trocarPainel("Jogo");
    }
 
    public MemoriaJogador getMemoriaJogador() {return memoriaJogador;}
    
    public MemoriaTelespectador getMemoriaTelespectador() {return memoriaTelespectador;}
    
    private Component getPainelAtual() {
        for (Component comp : painelPrincipal.getComponents()) {
            if (comp.isVisible()) {
                return comp;
            }
        }
        return null;
    }
    
    public void setModo(boolean modo){this.modoJogador = modo;}
    
    public boolean getModo(){return this.modoJogador;}
    
    public void chamarMetodoDoPainelAtual(String texto) {
        Component atual = getPainelAtual();

        if (modoJogador){
            if (atual instanceof EntrarJogo) {
                ((EntrarJogo) atual).processarString(texto);
            } 
            else if (atual instanceof EsperaJogo) {
                String[] partes = texto.split("-");
                if (partes[0].equals("Jogo Criado com Sucesso ")) ((EsperaJogo) atual).atualizarPanel(partes[1], true);
                else ((EsperaJogo) atual).atualizarPanel(partes[1], false);
            }
            else if (atual instanceof Jogo){
                ((Jogo) atual).processarString(texto);
            }
        } else{
            if (atual instanceof EntrarJogo) {
                ((EntrarJogo) atual).processarString(texto);
            } else if (atual instanceof Jogo){
                ((Jogo) atual).processarString(texto);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
